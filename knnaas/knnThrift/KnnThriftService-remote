#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from knnThrift import KnnThriftService
from knnThrift.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  BaseOutput status()'
  print '  KNNLocalResult predict(string model_id,  fv,  tv, string data_point_id, i32 by)'
  print '  UpdateOutput insert(string model_id, string data_point_id,  fv,  tv)'
  print '  UpdateOutput remove(string model_id, string data_point_id)'
  print '  UpdateOutput redis_insert(string model_id, string data_point_id,  fv,  tv)'
  print '  UpdateOutput redis_delete(string model_id, string data_point_id)'
  print '  BaseOutput commission(CommissionInput ci)'
  print '  BaseOutput decommission()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = KnnThriftService.Client(protocol)
transport.open()

if cmd == 'status':
  if len(args) != 0:
    print 'status requires 0 args'
    sys.exit(1)
  pp.pprint(client.status())

elif cmd == 'predict':
  if len(args) != 5:
    print 'predict requires 5 args'
    sys.exit(1)
  pp.pprint(client.predict(args[0],eval(args[1]),eval(args[2]),args[3],eval(args[4]),))

elif cmd == 'insert':
  if len(args) != 4:
    print 'insert requires 4 args'
    sys.exit(1)
  pp.pprint(client.insert(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'remove':
  if len(args) != 2:
    print 'remove requires 2 args'
    sys.exit(1)
  pp.pprint(client.remove(args[0],args[1],))

elif cmd == 'redis_insert':
  if len(args) != 4:
    print 'redis_insert requires 4 args'
    sys.exit(1)
  pp.pprint(client.redis_insert(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'redis_delete':
  if len(args) != 2:
    print 'redis_delete requires 2 args'
    sys.exit(1)
  pp.pprint(client.redis_delete(args[0],args[1],))

elif cmd == 'commission':
  if len(args) != 1:
    print 'commission requires 1 args'
    sys.exit(1)
  pp.pprint(client.commission(eval(args[0]),))

elif cmd == 'decommission':
  if len(args) != 0:
    print 'decommission requires 0 args'
    sys.exit(1)
  pp.pprint(client.decommission())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
